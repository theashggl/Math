github actions to use
https://github.com/marketplace/actions/dart-flutter-package-analyzer
https://github.com/marketplace/actions/labeler (use it later)

whole list of actions
https://github.com/sdras/awesome-actions

My opinion of Things to mind in a Flutter project-:
1) Linting
2) Single Responsibility for widgets
3) CI/CD implementation through github actions.
4) Testing
5) Github syncing of project.
Same from the expert's opinion can be found here - https://www.youtube.com/watch?v=bn5e95b3uLY


It is  recommended to deploy ci/cd locally before migrating to cloud platform

The sdlc model to use into the project-:
Agile for now.
Agile method -
 1) Requirement
 2) design
 3) development
 4) testing
 5) deployment
 6) review
 7) back to step 1

Try different services for push notifications like onesignal.

Custom Code-writing style used-:
1) Use the methods for the functionality of widgets in a different file named name of
   widgetfile_functionalities.dart for the file named widgetfile.dart
   which will have the test file named widgetfile_testnametest.dart.
2) Class names for the functionalities of the widget file will be ClassNameWithTheUIFunctionalities.
3) File name for the functionalities file will be file_name_of_ui_file_functionality.dart
4) MVVM design is used which is-:
ui<=>modelview<=>data
ui - is the interface
model view - is the intermediary which responds to the data changes
data - part is the actual data of the app.

The steps to build the app
design and get the ui ready and then work on getting the things perfect.

https://medium.com/nerd-for-tech/unit-testing-streams-in-dart-flutter-6ed72c19f761

There will be a head branch on which all the code will be worked on.
A sub branch to the working branch with the name as <workingbranchname,workflows> will be followed for all branches to try the faulty workflows and fix them, after which the commit will finally be pushed to the working branch.
The main branch will only contain the stable and features versions.

My understanding about git/github till now-:
For every commit we need to push to the respective branch (no automatic fix is foung yet). Or all commits can be pushed with( git push --all -u) so that the branches and commit are copied as it is on github and an upstream is set for the branches.
After the fix is done, we need to merge the branches but for that we need to run the query "git switch <branch where to merge the other branch>" and then "git merge <branch which will be merged>". and then we delete the branch merged by running git branch -d <merged branch name>.
But this works only for git, for github we need to create a pull request in github and then merge the branch.
The details can be found at this link https://www.youtube.com/watch?v=5g37NElQnCQ.

Getting a git warning during staging. Explanation -:
In Unix systems the end of a line is represented with a line feed (LF). In windows a line is represented with a carriage return (CR) and a line feed (LF) thus (CRLF). when you get code from git that was uploaded from a unix system they will only have an LF.
If you are a single developer working on a windows machine, and you don't care that git automatically replaces LFs to CRLFs, you can turn this warning off by typing the following in the git command line

"git config core.autocrlf true"